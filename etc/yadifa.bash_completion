################################################################################
#
# Copyright (c) 2011-2021, EURid. All rights reserved.
# The YADIFA TM software product is provided under the BSD 3-clause license:
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions
# are met:
#
#        * Redistributions of source code must retain the above copyright 
#          notice, this list of conditions and the following disclaimer.
#        * Redistributions in binary form must reproduce the above copyright 
#          notice, this list of conditions and the following disclaimer in the 
#          documentation and/or other materials provided with the distribution.
#        * Neither the name of EURid nor the names of its contributors may be 
#          used to endorse or promote products derived from this software 
#          without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
################################################################################

_yadifa_ctrl_find_subcmd()
{
    local subcword
    for (( subcword=1; subcword < ${#COMP_WORDS[@]}-1; subcword++ ))
    do
        case ${COMP_WORDS[subcword]} in
            cfgreload|freeze|freezeall|loglevel|logreopen|notify|querylog|reload|shutdown|sync|thaw|thawall|unfreeze|unfreezeall|zonecfgreload)
                subcmd="${COMP_WORDS[subcword]}"
                break
                ;;
            *)
                ;;
        esac
    done
}

_yadifa_ctrl()
{
    local subcmd
    _yadifa_ctrl_find_subcmd

    if [[ "x$subcmd" = "x" ]]
    then
        # standard options to complete
        opts="cfgreload freeze freezeall loglevel logreopen notify querylog reload shutdown sync thaw thawall unfreeze unfreezeall zonecfgreload"

    else
        opts="-c --config -s --server -p --port -K --key-name -y --key"

    fi

    #
    #   some basic options' arguments can be completed
    #
    case ${prev} in
        freeze|notify|reload|sync|thaw|unfreeze|zonecfgreload)
            _yadifa_find_all_zones

            return 0
            ;;
        -p)
            _yadifa_find_ports

            return 0
            ;;
        -s|--server)
            _yadifa_find_servers

            return 0
            ;;
        -K|--key-name)
            _yadifa_find_key_names

            return 0
            ;;
        -y|--key)
            _yadifa_find_key_names

            return 0
            ;;
        loglevel)
            local running="$(seq 0 15)"
            COMPREPLY=( $( compgen -W "${running}" -- "$cur" ) )

            return 0
            ;;
        querylog)
            local running="enable disable"
            COMPREPLY=( $( compgen -W "${running}" -- "$cur" ) )

            return 0
            ;;
        -c|--config)
            local xpat='conf'
            _filedir "${xpat}"

            return 0
            ;;
        -t)
            # options to complete if '-t' has been used
            local running="freeze unfreeze reload cfgreload sync querylog loglevel logreopen shutdown"
            COMPREPLY=( $( compgen -W "${running}" -- "$cur" ) )

            return 0
            ;;
        *)
            ;;
    esac


    COMPREPLY=( $( compgen -W "${opts}" -- "$cur" ) )

    return 0
}

_yadifa_find_keys()
{
    # TODO find different keys in the configuration
    local keys

    COMPREPLY=( $( compgen -W "${keys}" -- "$cur" ) )

    return 0
}

_yadifa_find_key_names()
{
    # TODO find different key names in the configuration
    local keynames

    COMPREPLY=( $( compgen -W "${keynames}" -- "$cur" ) )

    return 0
}

_yadifa_find_servers()
{
    # TODO find different servers in the configuration
    local servers

    COMPREPLY=( $( compgen -W "${servers}" -- "$cur" ) )

    return 0
}

_yadifa_find_ports()
{
    # TODO find different port numbers in the configuration
    local ports="53"

    COMPREPLY=( $( compgen -W "${ports}" -- "$cur" ) )

    return 0
}

_yadifa_find_all_zones()
{
    # TODO find all the zones in the configuration
    local zones

    COMPREPLY=( $( compgen -W "${zones}" -- "$cur" ) )

    return 0
}

_yadifa_find_cmd()
{
    local subcword
    for (( subcword=1; subcword < ${#COMP_WORDS[@]}-1; subcword++ ))
    do
        case ${COMP_WORDS[subcword]} in
            ctrl)
                cmd="ctrl"
                break
                ;;
            *)
                ;;
        esac
    done
}

_yadifa()
{
    local cur prev bprev cmd opts

    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    bprev="${COMP_WORDS[COMP_CWORD-2]}"

    # Look if we have a command or not
    _yadifa_find_cmd

    # standard options to complete
    opts="ctrl -V --version --help -h -v --verbose"

    case $cmd in
        ctrl)
            _yadifa_ctrl

            return 0
            ;;
        *)
            ;;
    esac

    COMPREPLY=( $( compgen -W "${opts}" -- "$cur" ) )

    return 0
} &&
complete -F _yadifa yadifa
